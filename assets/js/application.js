// Generated by CoffeeScript 1.6.2
var MediaInterfaceElement, VolumeController, allLoaded, embedYoutube, onAllReady, onYouTubePlayerReady, playerID, playing_video, renderUpcomingIfAvailable, size, socket, socket_url, video_media, video_not_yet_started;

socket_url = 'http://192.168.0.104:8081';

size = {
  x: 436,
  y: 356
};

playerID = 'ytplayer';

video_media = [];

playing_video = null;

socket = null;

allLoaded = false;

embedYoutube = function() {
  return swfobject.embedSWF("http://www.youtube.com/apiplayer?enablejsapi=1&playerapiid=ytplayer&version=3", "ytplayer", size.x, size.y, "8", null, null, {
    allowScriptAccess: 'always'
  }, {
    id: playerID
  });
};

$(function() {
  return embedYoutube();
});

onYouTubePlayerReady = function() {
  document.player = $('#' + playerID).get(0);
  document.player.playVideo();
  return document.connectToServer();
};

video_not_yet_started = function() {
  switch (document.player.getPlayerState()) {
    case 1:
    case 2:
    case 3:
    case 5:
      return false;
    default:
      return true;
  }
};

document.connectToServer = function() {
  socket = io.connect(socket_url);
  socket.on('play', function(data) {
    console.log("Play detected", data);
    return document.player.playVideo();
  });
  socket.on('pause', function(data) {
    console.log("Pause detected", data);
    return document.player.pauseVideo();
  });
  return socket.on('upcoming', function(videos) {
    var v, _i, _len, _ref;

    console.log('Got a new video list.');
    if (videos.length > 0 && video_not_yet_started()) {
      document.player.loadVideoById(videos[0].video_code);
    }
    video_media = [];
    $('.media-list').html(' ');
    _ref = videos.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      video_media.push(new MediaInterfaceElement(v));
    }
    playing_video = videos[0];
    return setTimeout(renderUpcomingIfAvailable, 200);
  });
};

document.play = function() {
  return socket.emit('play', {});
};

document.pause = function() {
  return socket.emit('pause', {});
};

document.update = function() {
  return socket.emit('update', {});
};

document.skip = function(vid) {
  if (vid == null) {
    vid = 0;
  }
  if (vid === 0) {
    vid = playing_video;
    document.player.loadVideoById(video_media[0].video.video_code);
  }
  return socket.emit('skip', vid);
};

renderUpcomingIfAvailable = function() {
  var all_loaded, v, _i, _j, _len, _len1;

  all_loaded = true;
  for (_i = 0, _len = video_media.length; _i < _len; _i++) {
    v = video_media[_i];
    if (v.loaded === false) {
      all_loaded = false;
      break;
    }
  }
  $('.media-list').html(' ');
  if (all_loaded) {
    for (_j = 0, _len1 = video_media.length; _j < _len1; _j++) {
      v = video_media[_j];
      v.insert();
    }
    if (!allLoaded) {
      return setTimeout(onAllReady(), 300);
    }
  } else {
    return setTimeout(renderUpcomingIfAvailable, 200);
  }
};

MediaInterfaceElement = (function() {
  function MediaInterfaceElement(video) {
    var me;

    this.video = video;
    me = this;
    me.loaded = false;
    $.get("https://gdata.youtube.com/feeds/api/videos/" + this.video.video_code + "?v=2&alt=json", function(r) {
      me.description = r.valueOf('media$group').entry.media$group.media$description.$t.substring(0, 140);
      me.title = r.valueOf('media$group').entry.title.$t.substring(0, 64);
      return me.loaded = true;
    });
  }

  MediaInterfaceElement.prototype.render = function() {
    var html;

    html = '<li class="media well"><a class="pull-left" href="#">';
    html += "<img class='media-object' style='width:100px' src='http://img.youtube.com/vi/" + this.video.video_code + "/hqdefault.jpg'></a>";
    html += "<div class='media-body'><h4 class='media-heading'>" + this.title + "</h4><div class='media'>";
    html += "" + this.description + "</div></div></li>";
    return html;
  };

  MediaInterfaceElement.prototype.insert = function() {
    return $('.media-list').append(this.render());
  };

  return MediaInterfaceElement;

})();

VolumeController = (function() {
  function VolumeController() {
    this.percent = 80;
    this.setVolume(this.percent);
  }

  VolumeController.prototype.setVolume = function(percent) {
    this.percent = percent;
    $('.volume-control').css('width', "" + this.percent + "%");
    return document.player.setVolume(this.percent);
  };

  return VolumeController;

})();

onAllReady = function() {
  $('.bigblock').fadeOut('slow');
  document.volume = new VolumeController();
  return allLoaded = true;
};
