// Generated by CoffeeScript 1.6.2
var HTTPServer, Video, db, fs, http, io, massUpdate, mysql, sockets, viewmap;

http = require('http');

fs = require('fs');

io = require('socket.io');

mysql = require('mysql');

db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'bitnami',
  database: 'video'
});

db.connect(function(err) {
  if (err) {
    throw err;
  }
});

io = io.listen(8081);

db.query("CREATE TABLE IF NOT EXISTS `videos` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `video_code` varchar(64) NOT NULL,  `last_played` timestamp NOT NULL DEFAULT 0,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;");

viewmap = {
  index: 'views/client.html',
  client: 'views/client.html',
  server: 'views/server.html'
};

HTTPServer = http.createServer(function(req, res) {
  var content, e, url;

  res.writeHead(200, {
    'Content-type': 'text/html'
  });
  url = req.url.slice(1);
  if (url === '') {
    url = 'index';
  }
  if (viewmap.hasOwnProperty(url)) {
    return res.end(fs.readFileSync(viewmap[url]));
  } else if (url.split('/')[0] === 'assets') {
    try {
      content = fs.readFileSync(url);
      return res.end(content);
    } catch (_error) {
      e = _error;
      return res.end(fs.readFileSync('views/404.html'));
    }
  } else {
    return res.end(fs.readFileSync('views/404.html'));
  }
});

HTTPServer.listen(8080);

Video = (function() {
  Video.get = function(callback) {
    var retval;

    retval = [];
    return db.query("select * from videos order by last_played = '0000-00-00 00:00:00' desc, last_played asc limit 4", function(err, result) {
      var f, row, _i, _len;

      if (err) {
        throw err;
      }
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        row = result[_i];
        retval.push(new Video(row.id));
      }
      f = function() {
        var loaded, v, _j, _len1;

        loaded = true;
        for (_j = 0, _len1 = retval.length; _j < _len1; _j++) {
          v = retval[_j];
          if (v.loaded === false) {
            loaded = false;
            break;
          }
        }
        if (loaded) {
          return callback(retval);
        } else {
          return setTimeout(f, 200);
        }
      };
      return setTimeout(f, 200);
    });
  };

  function Video(id, callback) {
    var me;

    if (id == null) {
      id = 0;
    }
    if (id !== 0) {
      this.id = id;
      this.loaded = false;
      me = this;
      db.query("select * from videos where id = " + this.id, function(err, result) {
        if (err) {
          throw err;
        }
        me.last_played = result[0].last_played;
        me.video_code = result[0].video_code;
        me.loaded = true;
        if (callback != null) {
          return callback();
        }
      });
      this.saved = true;
    } else {
      this.id = 0;
      this.saved = false;
    }
  }

  Video.prototype.save = function(callback) {
    var me;

    if (this.saved) {
      me = this;
      return db.query("update videos set video_code = '" + this.video_code + "' where id = " + this.id, function(err, result) {
        if (err) {
          throw err;
        }
        me.id = result.insertId;
        if (callback != null) {
          return callback();
        }
      });
    } else {
      db.query("insert into videos (video_code) value (" + this.video_code + ")");
      this.saved = true;
      if (callback != null) {
        return callback();
      }
    }
  };

  Video.prototype.updatePlayedTime = function() {
    return db.query("update videos set last_played = NOW() where id = " + this.id);
  };

  return Video;

})();

sockets = [];

io.sockets.on('connection', function(socket) {
  socket.connected = false;
  sockets.push(socket);
  Video.get(function(v) {
    return socket.emit('upcoming', v);
  });
  socket.on('end', function() {
    var i;

    console.log('The connection is closed');
    i = sockets.indexOf(socket);
    return sockets.splice(i, 1);
  });
  socket.on('play', function(message) {
    var s, _i, _len, _results;

    console.log("Somebody says: play");
    _results = [];
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      s = sockets[_i];
      _results.push(s.emit('play', '0'));
    }
    return _results;
  });
  socket.on('pause', function() {
    var s, _i, _len, _results;

    console.log("Somebody says: pause");
    _results = [];
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      s = sockets[_i];
      _results.push(s.emit('pause', '0'));
    }
    return _results;
  });
  socket.on('skip', function(video) {
    var v;

    return v = new Video(video.id, function() {
      v.updatePlayedTime();
      return setTimeout(massUpdate, 500);
    });
  });
  socket.on('volume', function(volume) {
    var s, _i, _len, _results;

    console.log("Somebody changed volume to:");
    console.log(volume);
    _results = [];
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      s = sockets[_i];
      _results.push(s.emit('play', volume));
    }
    return _results;
  });
  socket.on('add', function(video) {
    var v;

    console.log("Somebody added new video ", video.video_code);
    v = new Video();
    v.video_code = video.video_code;
    v.save(function() {
      var s, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = sockets.length; _i < _len; _i++) {
        s = sockets[_i];
        _results.push(s.emit('added', v));
      }
      return _results;
    });
    return setTimeout(massUpdate, 500);
  });
  return socket.on('update', function() {
    console.log("Recieved request for playlist update");
    return Video.get(function(v) {
      return socket.emit('upcoming', v);
    });
  });
});

massUpdate = function() {
  return Video.get(function(v) {
    var s, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      s = sockets[_i];
      _results.push(s.emit('upcoming', v));
    }
    return _results;
  });
};
